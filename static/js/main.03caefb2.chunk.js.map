{"version":3,"sources":["Todo.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","className","title","value","onClick","timer","icon","faClock","delete","faTrashAlt","Timer","state","timerOn","minutes","seconds","startTimer","setState","myInterval","setInterval","clearInterval","stopTimer","resetTimer","this","Component","library","add","faCheck","faPlus","faPlay","faPause","faRedoAlt","App","deleteTodo","e","preventDefault","index","target","name","todos","setTask","splice","setTodos","useState","showTimer","input","setInput","handleSubmit","type","placeholder","onChange","disabled","map","todo","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03caefb2.chunk.js","sourcesContent":["import React from 'react';\nimport './Todo.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClock, faTrashAlt } from '@fortawesome/free-regular-svg-icons'\n\n\nconst Todo = (props) => {\n    return (\n        <div className=\"todo\">\n            <h3>{props.title}</h3>\n            <div>\n                <button className=\"timerBtn\"\n                    value={props.value}\n                    onClick={props.timer}\n                >\n                    <FontAwesomeIcon icon={faClock} />\n                </button>\n                <button className=\"deleteBtn\"\n                    value={props.value}\n                    onClick={props.delete}\n                >\n                    <FontAwesomeIcon icon={faTrashAlt} />\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Todo;","import React, { Component } from 'react';\nimport './Timer.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default class Timer extends Component {\n    state = {\n        timerOn: false,\n        minutes: 25,\n        seconds: 0,\n    }\n\n    startTimer = () => {\n        this.setState({timerOn: true});\n\n        this.myInterval = setInterval(() => {\n            const { seconds, minutes } = this.state;\n\n            if (seconds > 0) {\n                this.setState(({ seconds }) => ({\n                    seconds: seconds - 1\n                }))\n            }\n            if (seconds === 0) {\n                if (minutes === 0) {\n                    clearInterval(this.myInterval)\n                } else {\n                    this.setState(({ minutes }) => ({\n                        minutes: minutes - 1,\n                        seconds: 59\n                    }))\n                }\n            } \n        }, 1000)\n    };\n\n    stopTimer = () => {\n        this.setState({ timerOn: false });\n        clearInterval(this.myInterval);\n    };\n    \n    resetTimer = () => {\n        this.setState({\n            timerOn: false,\n            minutes: 25,\n            seconds: 0\n        });\n    };\n        \n\n    render() {\n        const { minutes, seconds } = this.state;\n        return (\n            <div className=\"timer\">\n                <div>\n                    { minutes === 0 && seconds === 0\n                        ? <h1>Take a break!</h1>\n                        : <h3>Time Remaining: <span>{minutes}:{seconds < 10 ? `0${seconds}` : seconds}</span></h3>\n                    }\n                </div>\n                <div>\n                    {this.state.timerOn === false && this.state.minutes === 25 && (\n                        <button onClick={this.startTimer}>\n                            <FontAwesomeIcon icon='play' />\n                        </button>\n                    )}\n                    {this.state.timerOn === true && (this.state.minutes !== 0 || this.state.seconds !== 0) && (\n                        <button onClick={this.stopTimer}>\n                            <FontAwesomeIcon icon='pause' />\n                        </button>\n                    )}\n                    {this.state.timerOn === false && (this.state.minutes >= 0 && this.state.minutes !== 25) && (\n                        <button onClick={this.startTimer}>\n                            <FontAwesomeIcon icon='play' />\n                        </button>\n                    )}\n                    {this.state.timerOn === false && this.state.minutes !== 25 && (\n                        <button onClick={this.resetTimer}>\n                            <FontAwesomeIcon icon='redo-alt' />\n                        </button>\n                    )}\n                    {this.state.timerOn === true && (this.state.minutes === 0 && this.state.seconds === 0) && (\n                        <button onClick={this.resetTimer}>\n                            <FontAwesomeIcon icon='redo-alt' />\n                        </button>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}","import React, { useState } from 'react';\nimport Todo from './Todo';\nimport Timer from './Timer';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheck, faPlus, faPlay, faPause, faRedoAlt } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faCheck, faPlus, faPlay, faPause, faRedoAlt)\n\nfunction App() {\n  const deleteTodo = (e) => {\n    e.preventDefault();\n\n    let index = e.target.value;\n    \n    if (name === todos[index]){\n      setTask('Working on a task?');\n    } else {\n      setTask(name);\n    }\n    \n    todos.splice(index, 1);\n    setTodos([...todos]);\n  }\n\n  const [name, setTask] = useState('Working on a task?');\n  \n  const showTimer = (e) => {\n    e.preventDefault();\n\n    let index = e.target.value;\n    setTask(todos[index]);\n  }\n\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setTodos([...todos, input]);\n    setInput(\"\");\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"leftSide\">\n        <h1 className=\"title\">\n          <FontAwesomeIcon icon={faCheck} />\n          <span>TO-DO LIST</span>\n        </h1>\n        <form>\n          <input type=\"text\" \n          placeholder=\"What's your next task?\"\n          value={input} \n          onChange={e => setInput(e.target.value)} \n          />\n          <button \n            className=\"addBtn\"\n            disabled={!input} \n            onClick={handleSubmit}\n          >\n            <FontAwesomeIcon icon={faPlus} \n            onClick={handleSubmit}/>\n          </button>\n        </form>\n        <div className='list'>\n          {\n            todos.map((todo, index) => (\n              <Todo \n                key={index}\n                value={index}\n                title={todo}\n                delete={deleteTodo}\n                timer={showTimer}\n              />\n            ))\n          }\n        </div>\n      </div>\n      <div className=\"rightSide\">\n        <div className=\"taskNow\">{name}</div>\n        <Timer/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}